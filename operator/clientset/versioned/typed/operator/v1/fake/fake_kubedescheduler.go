// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	operatorv1 "github.com/openshift/api/operator/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeDeschedulers implements KubeDeschedulerInterface
type FakeKubeDeschedulers struct {
	Fake *FakeOperatorV1
}

var kubedeschedulersResource = schema.GroupVersionResource{Group: "operator.openshift.io", Version: "v1", Resource: "kubedeschedulers"}

var kubedeschedulersKind = schema.GroupVersionKind{Group: "operator.openshift.io", Version: "v1", Kind: "KubeDescheduler"}

// Get takes name of the kubeDescheduler, and returns the corresponding kubeDescheduler object, and an error if there is any.
func (c *FakeKubeDeschedulers) Get(ctx context.Context, name string, options v1.GetOptions) (result *operatorv1.KubeDescheduler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(kubedeschedulersResource, name), &operatorv1.KubeDescheduler{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.KubeDescheduler), err
}

// List takes label and field selectors, and returns the list of KubeDeschedulers that match those selectors.
func (c *FakeKubeDeschedulers) List(ctx context.Context, opts v1.ListOptions) (result *operatorv1.KubeDeschedulerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(kubedeschedulersResource, kubedeschedulersKind, opts), &operatorv1.KubeDeschedulerList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &operatorv1.KubeDeschedulerList{ListMeta: obj.(*operatorv1.KubeDeschedulerList).ListMeta}
	for _, item := range obj.(*operatorv1.KubeDeschedulerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeDeschedulers.
func (c *FakeKubeDeschedulers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(kubedeschedulersResource, opts))
}

// Create takes the representation of a kubeDescheduler and creates it.  Returns the server's representation of the kubeDescheduler, and an error, if there is any.
func (c *FakeKubeDeschedulers) Create(ctx context.Context, kubeDescheduler *operatorv1.KubeDescheduler, opts v1.CreateOptions) (result *operatorv1.KubeDescheduler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(kubedeschedulersResource, kubeDescheduler), &operatorv1.KubeDescheduler{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.KubeDescheduler), err
}

// Update takes the representation of a kubeDescheduler and updates it. Returns the server's representation of the kubeDescheduler, and an error, if there is any.
func (c *FakeKubeDeschedulers) Update(ctx context.Context, kubeDescheduler *operatorv1.KubeDescheduler, opts v1.UpdateOptions) (result *operatorv1.KubeDescheduler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(kubedeschedulersResource, kubeDescheduler), &operatorv1.KubeDescheduler{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.KubeDescheduler), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeDeschedulers) UpdateStatus(ctx context.Context, kubeDescheduler *operatorv1.KubeDescheduler, opts v1.UpdateOptions) (*operatorv1.KubeDescheduler, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(kubedeschedulersResource, "status", kubeDescheduler), &operatorv1.KubeDescheduler{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.KubeDescheduler), err
}

// Delete takes name of the kubeDescheduler and deletes it. Returns an error if one occurs.
func (c *FakeKubeDeschedulers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(kubedeschedulersResource, name), &operatorv1.KubeDescheduler{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeDeschedulers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(kubedeschedulersResource, listOpts)

	_, err := c.Fake.Invokes(action, &operatorv1.KubeDeschedulerList{})
	return err
}

// Patch applies the patch and returns the patched kubeDescheduler.
func (c *FakeKubeDeschedulers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *operatorv1.KubeDescheduler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(kubedeschedulersResource, name, pt, data, subresources...), &operatorv1.KubeDescheduler{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operatorv1.KubeDescheduler), err
}
